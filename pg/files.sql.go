// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: files.sql

package pgrepo

import (
	"context"
)

const createFile = `-- name: CreateFile :one
insert into files (file, name, mimetype) values ($1, $2, $3) RETURNING id, file, name, mimetype
`

type CreateFileParams struct {
	File     []byte
	Name     string
	Mimetype string
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRow(ctx, createFile, arg.File, arg.Name, arg.Mimetype)
	var i File
	err := row.Scan(
		&i.ID,
		&i.File,
		&i.Name,
		&i.Mimetype,
	)
	return i, err
}

const getFile = `-- name: GetFile :one
select id, file, name, mimetype from files where id=$1
`

func (q *Queries) GetFile(ctx context.Context, id int64) (File, error) {
	row := q.db.QueryRow(ctx, getFile, id)
	var i File
	err := row.Scan(
		&i.ID,
		&i.File,
		&i.Name,
		&i.Mimetype,
	)
	return i, err
}

const getFiles = `-- name: GetFiles :many
select id, name from files
`

type GetFilesRow struct {
	ID   int64
	Name string
}

func (q *Queries) GetFiles(ctx context.Context) ([]GetFilesRow, error) {
	rows, err := q.db.Query(ctx, getFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilesRow
	for rows.Next() {
		var i GetFilesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
