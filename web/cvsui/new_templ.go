// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package cvsui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "forms/web"

func New() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"my-3\"><form method=\"post\" action=\"/cvs\"><div class=\"mb-3\"><label for=\"cv_name\" class=\"form-label\">Nome</label> <input id=\"cv_name\" type=\"text\" name=\"name\" class=\"form-control\"></div><div id=\"dropzone\" class=\"border border-primary-subtle rounded d-flex align-items-center justify-content-center text-center mb-3\" style=\"min-height: 100px; cursor: pointer;\"><span>Clique ou Arraste seus arquivos aqui</span> <input id=\"cv_file\" multiple=\"true\" hidden type=\"file\" name=\"files\" class=\"form-control\"></div><div id=\"filelist\" class=\"list-group my-2 pointer-cursor\"></div><button type=\"submit\" class=\"btn btn-outline-primary\">Enviar</button></form></div><script>\n            let fileListContent = (files) => {\n                let content = \"\"\n                for ( let file of files ) {\n                    content = content + `<div class=\"list-group-item list-group-item-action\">\n                        <div class=\"row justify-content-between\">\n                            <div class=\"col-6\">${file.name}</div>\n                            <div class=\"col-6\">${file.size} bytes</div>\n                        </div>\n                    </div>`\n                }\n\n                return content\n            }\n\n            let removeDragoverStyle = () => {\n                dropzone.classList.remove(\"border-success\")\n                dropzone.classList.remove(\"border-4\")\n                dropzone.classList.add(\"border-primary-subtle\")\n            }\n\n            let upload = (files) => {\n                const formData = new FormData()\n                for (let file of files) {\n                    formData.append('files', file)\n                }\n\n                fetch(\"/cvs\", {\n                    method: \"POST\",\n                    body: formData,\n                })\n            }\n\n            const dropzone = document.getElementById(\"dropzone\")\n            const fileList = document.getElementById(\"filelist\")\n            const inputFile = document.getElementById(\"cv_file\")\n\n            dropzone.addEventListener(\"dragover\", e => {\n                e.preventDefault()\n                dropzone.classList.remove(\"border-primary-subtle\")\n                dropzone.classList.add(\"border-success\")\n                dropzone.classList.add(\"border-4\")\n            })\n\n            dropzone.addEventListener(\"dragleave\", e => {\n                e.preventDefault()\n                removeDragoverStyle()\n            })\n\n            dropzone.addEventListener(\"drop\", e => {\n                e.preventDefault()\n                removeDragoverStyle()\n                const files = e.dataTransfer.files\n                upload(files)\n                fileList.innerHTML = fileListContent(files)\n            })\n\n            dropzone.addEventListener(\"click\", e => {\n                inputFile.click()\n            })\n\n            inputFile.addEventListener(\"change\", event => {\n                upload(inputFile.files)\n                fileList.innerHTML = fileListContent(inputFile.files)\n            })\n\n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = web.ApplicationLayout("Novo CV").Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
